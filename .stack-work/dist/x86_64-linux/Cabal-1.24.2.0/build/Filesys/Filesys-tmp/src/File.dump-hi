
==================== FINAL INTERFACE ====================
2017-02-12 12:37:49.451259 UTC

interface main@main:File 8002
  interface hash: d612d5e067228badb8bef2b4f04365c4
  ABI hash: fe45652e4686669ad96931cd7b8cae0b
  export-list hash: 1f414a4dfe39dd7aaa79a4cc36ab007b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9abef3a513ea2fb601bd87795903c8c6
  sig of: Nothing
  used TH splices: False
  where
exports:
  File.isRoot
  File.File{File.Directory File.NormalFile content files name}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
8f3010540be9429b6cf77e7b17710cf2
  $fEqFile :: GHC.Classes.Eq File.File
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ File.File File.$fEqFile_$c== File.$fEqFile_$c/= -}
8f3010540be9429b6cf77e7b17710cf2
  $fEqFile_$c/= :: File.File -> File.File -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: File.File) (b :: File.File) ->
                 case File.$fEqFile_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8f3010540be9429b6cf77e7b17710cf2
  $fEqFile_$c== :: File.File -> File.File -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
8f3010540be9429b6cf77e7b17710cf2
  $fShowFile :: GHC.Show.Show File.File
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ File.File
                  File.$fShowFile_$cshowsPrec
                  File.$fShowFile_$cshow
                  File.$fShowFile_$cshowList -}
8f3010540be9429b6cf77e7b17710cf2
  $fShowFile1 :: File.File -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: File.File) (w1 :: GHC.Base.String) ->
                 File.$w$cshowsPrec 0# w w1) -}
8f3010540be9429b6cf77e7b17710cf2
  $fShowFile_$cshow :: File.File -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: File.File) ->
                 File.$fShowFile_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8f3010540be9429b6cf77e7b17710cf2
  $fShowFile_$cshowList :: [File.File] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ File.File File.$fShowFile1) -}
8f3010540be9429b6cf77e7b17710cf2
  $fShowFile_$cshowsPrec ::
    GHC.Types.Int -> File.File -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: File.File)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 File.$w$cshowsPrec ww1 w1 w2 }) -}
ca90f119d2a23d8f9455b253f900ed38
  $tc'Directory :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8674479764852085810##
                   16797510056654606449##
                   File.$trModule
                   File.$tc'Directory1) -}
6d534e2a496f66bb3508573a002b84e5
  $tc'Directory1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Directory"#) -}
96a09352e186259bdf3acad3fcf15b8a
  $tc'NormalFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4091286736026518402##
                   1881425498880547317##
                   File.$trModule
                   File.$tc'NormalFile1) -}
91bb4e5255b00a7fae12f4e9e1143c94
  $tc'NormalFile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NormalFile"#) -}
7b814a4fcf74a76600a11a908bc940db
  $tcFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6787351074130769172##
                   14592378935939573061##
                   File.$trModule
                   File.$trModule1) -}
1fcfcbd1eb7c135c9cc3e8c4f1b68796
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module File.$trModule2 File.$trModule1) -}
b6d94329d11439380dc35ab27f1bebc4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "File"#) -}
e0130116dd435fd959be1dd666b8d069
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
8f3010540be9429b6cf77e7b17710cf2
  $w$cshowsPrec ::
    GHC.Prim.Int# -> File.File -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
8f3010540be9429b6cf77e7b17710cf2
  data File
    = NormalFile {name :: GHC.Base.String, content :: GHC.Base.String}
    | Directory {name :: GHC.Base.String, files :: [File.File]}
6ef6a8a8d7e7da84918ed0ad0b92a732
  content :: File.File -> GHC.Base.String
  RecSel Left File.File
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: File.File) ->
                 case ds of wild {
                   File.NormalFile ds1 ds2 -> ds2
                   File.Directory ipv ipv1 -> File.content1 }) -}
4fb3bc24c9e1ef1aa7427b52b0eb5ab5
  content1 :: GHC.Base.String
  {- Strictness: x -}
c90387ca3c984256f621a56019e587b2
  files :: File.File -> [File.File]
  RecSel Left File.File
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: File.File) ->
                 case ds of wild {
                   File.NormalFile ipv ipv1 -> File.files1
                   File.Directory ds1 ds2 -> ds2 }) -}
8b6db04c9f9719ae3d06dca7d751f690
  files1 :: [File.File]
  {- Strictness: x -}
1732cf9667fbf4ef46bec17a4eb698fa
  isRoot :: File.File -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: File.File) ->
                 case ds of wild {
                   File.NormalFile ds1 ds2 -> File.isRoot1
                   File.Directory ds1 ds2
                   -> case ds1 of wild1 {
                        [] -> GHC.Types.True : ipv ipv1 -> GHC.Types.False } }) -}
4abef3638538627fcf953478072aa94d
  isRoot1 :: GHC.Types.Bool
  {- Strictness: x -}
64952026de520ec5fc91bc764c857135
  name :: File.File -> GHC.Base.String
  RecSel Left File.File
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: File.File) ->
                 case ds of wild {
                   File.NormalFile ds1 ds2 -> ds1 File.Directory ds1 ds2 -> ds1 }) -}
instance [safe] GHC.Classes.Eq [File.File] = File.$fEqFile
instance [safe] GHC.Show.Show [File.File] = File.$fShowFile
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

